"###############################################################################
"                                                                              #
" File informations:                                                           #
" - Name:    vim/cfg/plugins/neocomplete.vim.tt                                #
" - Summary: The configuration for the neocomplete plugin.                     #
" - Authors:                                                                   #
"   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)              #
"                                                                              #
" Project informations:                                                        #
"   - Homepage:        https://github.com/alem0lars/configs                    #
"   - Getting started: see README.md in the project root folder                #
"                                                                              #
" License: Apache v2.0 (see below)                                             #
"                                                                              #
"###############################################################################
"                                                                              #
" Licensed to the Apache Software Foundation (ASF) under one more contributor  #
" license agreements.  See the NOTICE file distributed with this work for      #
" additional information regarding copyright ownership. The ASF licenses this  #
" file to you under the Apache License, Version 2.0 (the "License"); you may   #
" not use this file except in compliance with the License.                     #
" You may obtain a copy of the License at                                      #
"                                                                              #
"   http://www.apache.org/licenses/LICENSE-2.0                                 #
"                                                                              #
" Unless required by applicable law or agreed to in writing, software          #
" distributed under the License is distributed on an "AS IS" BASIS, WITHOUT    #
" WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.             #
" See the License for the specific language governing permissions and          #
" limitations under the License.                                               #
"                                                                              #
"###############################################################################


" {{{ Enable neocomplete

" Disable autocomplpop.
let g:acp_enableAtStartup = 0

" Use neocomplete.
let g:neocomplete#enable_at_startup = 1

" }}}

" {{{ Completion rules

" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" Don't display more than 32 items.
let g:neocomplete#max_list = 32

" Minimum char completion lengths.
let g:neocomplete#sources#syntax#min_keyword_length = 2

" Don't preselect entries.
let g:neocomplete#enable_auto_select = 0
" Don't add automatic delimiters.
let g:neocomplete#enable_auto_delimiter = 0

let g:neocomplete#enable_cursor_hold_i = 1
let g:neocomplete#cursor_hold_i_time = 32

" }}}

" {{{ Dictionary definition

let g:neocomplete#sources#dictionary#dictionaries = {
  \ 'default'  : '',
  \ 'vimshell' : expand('<%= get_var! "vim.vimshell_tmp_dir" %>')
  \ }

" }}}

" {{{ Keywords patterns to completion

" Define keywords patterns for completion.
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" }}}

" {{{ Keywords patterns to omni completion

" Enable per-language completion based on input patterns.
" The following input patterns definitions will add corresponding
" omni function to the available completion sources, without
" forcing it over the other sources available.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
<% if has_feature? :latex %>
let g:neocomplete#sources#omni#input_patterns.tex = '\v\\\a*(ref|cite)\a*([^]]*\])?\{([^}]*,)*[^}]*'
<% end %>


" Enable forcing per-language completion based on input patterns.
" The following input patterns definitions will force to use the
" corresponding omni func when they match; in that case, the other
" sources will be ignored.
if !exists('g:neocomplete#force_omni_input_patterns')
  let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
let g:neocomplete#force_omni_input_patterns.objc = '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)'
let g:neocomplete#force_omni_input_patterns.objcpp = '\[\h\w*\s\h\?\|\h\w*\%(\.\|->\)\|\h\w*::\w*'
<% if has_feature? :python %>
let g:neocomplete#force_omni_input_patterns.python = '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
<% end %>
<% if has_feature? :ruby %>
let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'
<% end %>

" }}}


" omnifunc setup {{{

" c,c++,objc,objcpp -> clang_complete
" Automatic setup by plugin

<% if has_feature? :python %>
" python -> jedi
" Needed because we set `g:jedi#completions_enabled=0` to skip the
" direct usage of jedi-vim, but it's there where the plugin also
" registers the omnifunc.
autocmd FileType python setlocal omnifunc=jedi#completions
<% end %>

<% if has_feature? :ruby %>
" ruby -> rubycomplete
autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
<% end %>

<% if has_feature? :haskell %>
" haskell -> necoghc
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
<% end %>

" Use the builtin csscomplete for css.
" TODO: Check if it's necessary.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" Use the builtin htmlcomplete for html and markdown.
" TODO: Check if it's necessary.
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" Use the builtin javascriptcomplete for javascript.
" TODO: Check if it's necessary.
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType coffee setlocal omnifunc=javascriptcomplete#CompleteJS

" }}}


" hotkeys {{{

inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" <C-y>: Close popup.
inoremap <expr><C-y>  neocomplete#close_popup()
" <C-e>: to close popup and cancel selection
inoremap <expr><C-e>  neocomplete#cancel_popup()

" <C-h> or <BS>: Close popup before deleting the char.
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" <CR>: Close the popup.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction

" <TAB>: Expand snippet or complete.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

" }}}


" vim: set filetype=vim :
