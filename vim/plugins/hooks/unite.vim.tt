" {{{ ##########################################################################
"                                                                              #
" File informations:                                                           #
" - Name:    vim/plugins/hooks/unite.vim.tt                                    #
" - Summary: Hooks for the plugin `unite`.                                     #
" - Authors:                                                                   #
"   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)              #
"                                                                              #
" Project informations:                                                        #
"   - Homepage:        https://github.com/alem0lars/configs                    #
"   - Getting started: see README.md in the project root folder                #
"                                                                              #
" License: Apache v2.0 (see below)                                             #
"                                                                              #
"###############################################################################
"                                                                              #
" Licensed to the Apache Software Foundation (ASF) under one more contributor  #
" license agreements.  See the NOTICE file distributed with this work for      #
" additional information regarding copyright ownership. The ASF licenses this  #
" file to you under the Apache License, Version 2.0 (the "License"); you may   #
" not use this file except in compliance with the License.                     #
" You may obtain a copy of the License at                                      #
"                                                                              #
"   http://www.apache.org/licenses/LICENSE-2.0                                 #
"                                                                              #
" Unless required by applicable law or agreed to in writing, software          #
" distributed under the License is distributed on an "AS IS" BASIS, WITHOUT    #
" WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.             #
" See the License for the specific language governing permissions and          #
" limitations under the License.                                               #
"                                                                              #
" }}} ##########################################################################


function! RC_Plugins_Hooks_Unite_OnLoad()
  " Use fuzzy matcher for filtering elements.
  call unite#filters#matcher_default#use(['matcher_fuzzy'])

  " Set the grep command used by unite (and its cli arguments).
  if executable('ag')
    let g:unite_source_grep_command = 'ag'
    let g:unite_source_grep_default_opts = '--line-numbers --nogroup --nocolor
          \ --follow --hidden --ignore-case --skip-vcs-ignores'
  endif

  call s:RC_Plugins_Hooks_Unite_ConfigureHotkeys()
endfunction

function! s:RC_Plugins_Hooks_Unite_ConfigureHotkeys()
  " <Leader>unb: Buffer switching.
  nnoremap <silent> <Leader>unb :<C-u>Unite -quick-match -buffer-name=buffers
        \ buffer<CR>

  " <Leader>ung: Start a grep search from the current directory.
  nnoremap <silent> <Leader>ung :<C-u>Unite -buffer-name=grep grep:.<CR>

  " <Leader>unj: Browse most recently used files.
  nnoremap <silent> <Leader>unj :<C-u>Unite -buffer-name=files
        \ -default-action=lcd neomru/file<CR>
  " <Leader>unJ: Browse most recently used directories.
  nnoremap <silent> <Leader>unJ :<C-u>Unite -buffer-name=files
        \ -default-action=lcd neomru/directory<CR>

  " <Leader>unk: Bookmark file (from current directory).
  nnoremap <silent> <Leader>unk :<C-u>UniteWithCurrentDir -buffer-name=files
        \ buffer bookmark file<CR>
  " <Leader>unK: Bookmark file (from current buffer's directory).
  nnoremap <silent> <Leader>unK :<C-u>UniteWithBufferDir -buffer-name=files
        \ buffer bookmark file<CR>

  " <Leader>unm: Show the defined mappings.
  nnoremap <silent> <Leader>unm :<C-u>Unite mapping<CR>

  " <Leader>unn: Show the list of unite sources.
  nnoremap <silent> <Leader>unn :<C-u>Unite source<CR>

  " <Leader>unr: Show registers state.
  nnoremap <silent> <Leader>unr :<C-u>Unite -buffer-name=register register<CR>

  " <Leader>uns: Perform file search, like control-p.
  nnoremap <silent> <Leader>uns :<C-u>Unite -buffer-name=files -start-insert
        \ file_rec/async:!<CR>

  " <Leader>uny: Open yank history.
  let g:unite_source_history_yank_enable = 1
  nnoremap <silent> <Leader>uny :<C-u>Unite -buffer-name=yank_history
        \ history/yank<CR>

  " <Leader>unu: Resume a previous unite action.
  nnoremap <silent> <Leader>unu :<C-u>Unite -buffer-name=resume resume<CR>

  " Custom mappings for the unite buffer.
  autocmd FileType unite call s:RC_Plugins_Hooks_Unite_ConfigureFTHotkeys()
endfunction

" TODO: I need to add the unite-outline plugin.
"nnoremap <silent> <Leader>uno  :<C-u>Unite outline<CR>

" TODO: I need tabpagebuffer plugin.
" <Leader>unf: Everything for files: show/create new files, show tabs, etc..
"nnoremap <silent> <Leader>unf :<C-u>Unite -buffer-name=files -no-split
"        \ jump_point file_point buffer_tab
"        \ file_rec:! file file/new<CR>

function! s:RC_Plugins_Hooks_Unite_ConfigureFTHotkeys()
  " <C->movement: navigate in the unite buffer
  imap <buffer> <C-j> <Plug>(unite_select_next_line)
  imap <buffer> <C-k> <Plug>(unite_select_previous_line)

  " TODO: Check which hotkeys are ok for me, and uncomment those..

  "imap <buffer> jj    <Plug>(unite_insert_leave)
  "imap <buffer> <C-w> <Plug>(unite_delete_backward_path)

  " imap <buffer><expr> j unite#smart_map('j', '')
  " imap <buffer> <TAB> <Plug>(unite_select_next_line)
  " imap <buffer> <C-w> <Plug>(unite_delete_backward_path)
  " imap <buffer> '     <Plug>(unite_quick_match_default_action)
  " nmap <buffer> '     <Plug>(unite_quick_match_default_action)
  " imap <buffer><expr> x
  "         \ unite#smart_map('x', "\<Plug>(unite_quick_match_choose_action)")
  " nmap <buffer> x     <Plug>(unite_quick_match_choose_action)
  " nmap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
  " imap <buffer> <C-z>     <Plug>(unite_toggle_transpose_window)
  " imap <buffer> <C-y>     <Plug>(unite_narrowing_path)
  " nmap <buffer> <C-y>     <Plug>(unite_narrowing_path)
  " nmap <buffer> <C-j>     <Plug>(unite_toggle_auto_preview)
  " nmap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
  " imap <buffer> <C-r>     <Plug>(unite_narrowing_input_history)
  " nnoremap <silent><buffer><expr> l
  "         \ unite#smart_map('l', unite#do_action('default'))

  " let unite = unite#get_current_unite()
  " if unite.profile_name ==# 'search'
  "   nnoremap <silent><buffer><expr> r     unite#do_action('replace')
  " else
  "   nnoremap <silent><buffer><expr> r     unite#do_action('rename')
  " endif

  " nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')
  " nnoremap <buffer><expr> S      unite#mappings#set_current_filters(
  "         \ empty(unite#mappings#get_current_filters()) ?
  "         \ ['sorter_reverse'] : [])

  " Runs "split" action by <C-s>.
  " imap <silent><buffer><expr> <C-s>     unite#do_action('split')
endfunction


" vim: set filetype=vim :
