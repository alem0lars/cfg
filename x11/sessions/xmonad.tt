#!/usr/bin/env zsh
#
################################################################################
#                                                                              #
# File informations:                                                           #
# - Name:    cmus/rc.tt                                                        #
# - Summary: The cmus configuration.                                           #
# - Authors:                                                                   #
#   - Alessandro Molari <molari.alessandro@gmail.com> (alem0lars)              #
#                                                                              #
# Project informations:                                                        #
#   - Homepage:        https://github.com/alem0lars/configs                    #
#   - Getting started: see README.md in the project root folder                #
#                                                                              #
# License: Apache v2.0 (see below)                                             #
#                                                                              #
################################################################################
#                                                                              #
# Licensed to the Apache Software Foundation (ASF) under one more contributor  #
# license agreements.  See the NOTICE file distributed with this work for      #
# additional information regarding copyright ownership. The ASF licenses this  #
# file to you under the Apache License, Version 2.0 (the "License"); you may   #
# not use this file except in compliance with the License.                     #
# You may obtain a copy of the License at                                      #
#                                                                              #
#   http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT    #
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.             #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
#                                                                              #
################################################################################


autoload colors && colors


echo -e "${fg[blue]}merging in x11 defaults and keymaps${reset_color}"
sysresources="/etc/X11/xinit/Xresources"
if [ -f $sysresources ]; then xrdb -merge "${sysresources}"; fi
sysmodmap="/etc/X11/xinit/Xmodmap"
if [ -f $sysmodmap ]; then xmodmap "${sysmodmap}"; fi
userresources="${HOME}/.Xresources"
if [ -f "$userresources" ]; then xrdb -merge "${userresources}"; fi
usermodmap="${HOME}/.Xmodmap"
if [ -f "$usermodmap" ]; then xmodmap "${usermodmap}"; fi

<% if has_feature? 'downscale' %>
monitor=`xrandr | grep -i edp | cut -d " " -f 1`
xrandr --newmode  "1440x900_60.00"  106.50  1440 1528 1672 1904  900 903 909 934 -hsync +vsync
xrandr --addmode $monitor 1440x900_60.00
xrandr --output $monitor --mode 1440x900_60.00
<% end %>

<% if get_var 'dpi' %>
xrandr --dpi <%= get_var! 'dpi' %>
<% end %>

echo -e "${fg[blue]}setting typmatic${reset_color}"
xset r rate 300 30

echo -e "${fg[blue]}setting custom keys${reset_color}"
setxkbmap -option ctrl:nocaps

if [[ -f ~/.fehbg ]]; then
  echo -e "${fg[blue]}applying default background${reset_color}"
  source ~/.fehbg
fi

<% if has_feature? :urxvt %>
echo -e "${fg[blue]}starting urxvtd${reset_color}"
urxvtd -o -f
<% end %>

<% if has_feature? :pulseaudio %>
echo -e "${fg[blue]}starting pulseaudio${reset_color}"
start-pulseaudio-x11 &
<% end %>

<% if has_feature? :autocutsel %>
echo -e "${fg[blue]}starting autocutsel${reset_color}"
autocutsel -fork
<% end %>

<% if has_feature? :trayer %>
echo -e "${fg[blue]}starting trayer${reset_color}"
killall trayer-srg > /dev/null
nohup trayer-srg --edge top --align right \
                 --width  12 --widthtype  percent \
                 --height <%= size = Integer(Integer(get_var!('fonts.main.size')) * 1.2); has_feature?('hidpi') ? size * 2 : size %> \
                 --heighttype pixel --SetDockType true --SetPartialStrut true \
                 --expand true --alpha 0 --transparent true --tint 0x1c1c1c \
                 > /dev/null &
<% end %>

<% if has_feature? :networkmanager %>
echo -e "${fg[blue]}starting nm-applet${reset_color}"
killall nm-applet > /dev/null
nm-applet &
<% end %>

<% if has_feature? :conky %>
echo -e "${fg[blue]}starting conky${reset_color}"
killall conky > /dev/null
conky -c /etc/conky/conky_1.conf -d > /dev/null
conky -c /etc/conky/conky_2.conf -d > /dev/null
<% end %>

if [[ -f ~/.screenlayout/default.sh ]]; then
  echo -e "${fg[blue]}applying default screen layout ${reset_color}"
  source ~/.screenlayout/default.sh
fi

<% if has_feature? 'copyq' %>
echo -e "${fg[blue]}starting copyq${reset_color}"
copyq &
<% elsif has_feature? 'parcellite' %>
echo -e "${fg[blue]}starting parcellite${reset_color}"
parcellite &
<% end %>

echo -e "${fg[blue]}starting gpg agent${reset_color}"
if [ -x /usr/bin/gpg-agent ]; then
  eval "$(/usr/bin/gpg-agent --daemon)"
fi

echo -e "${fg[blue]}starting ssh agent${reset_color}"
if [ -x /usr/bin/ssh-agent ]; then
  eval "$(/usr/bin/ssh-agent -s)"
fi

echo -e "${fg[blue]}starting xmonad${reset_color}"
xmonad


# vim: set filetype=zsh :
